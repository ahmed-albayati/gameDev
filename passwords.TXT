keystore
p: ForCOM2023

SHA256: 2E:C8:64:C4:73:B3:92:90:25:A5:A6:C9:DA:65:EE:C0:BD:D2:B6:2F:69:05:39:C7:30:51:E3:FF:49:8E:85:49
clinet ID : 
1164655603897880448
new : 
1164655603897880448

clinet secret : EBC418E2D6BD4DFF6D34C94282B9EC9F3455268EBF92C20841700D5F8C984BE9
new : EBC418E2D6BD4DFF6D34C94282B9EC9F3455268EBF92C20841700D5F8C984BE9

after run cmd line : 
Alias name: alias
Creation date: May 26, 2023
Entry type: PrivateKeyEntry
Certificate chain length: 1
Certificate[1]:
Owner: O=company, CN=ah ab
Issuer: O=company, CN=ah ab


package name : com.forCOMAhAb.huawei
Serial number: 2dce9445
Valid from: Fri May 26 18:01:34 EET 2023 until: Sat May 13 18:01:34 EET 2073
Certificate fingerprints:
         MD5:  3C:26:9B:5E:E3:96:EE:3E:99:F4:33:4C:BD:80:78:56
         SHA1: CA:B0:D7:71:24:03:57:DC:AC:0E:2D:B1:75:40:79:2F:B2:74:46:C7
         SHA256: 2E:C8:64:C4:73:B3:92:90:25:A5:A6:C9:DA:65:EE:C0:BD:D2:B6:2F:69:05:39:C7:30:51:E3:FF:49:8E:85:49
Signature algorithm name: SHA1withRSA
Subject Public Key Algorithm: 2048-bit RSA key
Version: 3



ibraheem.ragheb.ir@gmail.com
p : COM@2023

policy page url : https://ahmed-albayati.github.io/policyForErrorRun/


IAPManager scirpt : 
using System;
using UnityEngine;
using UnityEngine.Purchasing;

public class IAPManager : MonoBehaviour, IStoreListener
{
    private IStoreController controller; // The Unity Purchasing system.
    private IExtensionProvider extensions; // The store-specific Purchasing subsystems.

    public const string item2Id = "2"; // Your item id here.

    void Start()
    {
        InitializePurchasing();
    }

    private bool IsInitialized
    {
        get { return controller != null && extensions != null; }
    }

    public void InitializePurchasing()
    {
        if (IsInitialized) return;

        var builder = ConfigurationBuilder.Instance(StandardPurchasingModule.Instance());

        builder.AddProduct(item2Id, ProductType.Consumable);

        UnityPurchasing.Initialize(this, builder);
    }

    public void BuyProductID(string productId)
    {
        // If the stores are not yet initialized, we can't buy anything,
        // so we return
        if (IsInitialized)
        {
            // If the product has a valid ID
            Product product = controller.products.WithID(productId);

            if (product != null && product.availableToPurchase)
            {
                Debug.Log(string.Format("Purchasing product asychronously: '{0}'", product.definition.id));
                // Buy the product, expect a response either through ProcessPurchase or OnPurchaseFailed asynchronously.
                controller.InitiatePurchase(product);
            }
            else
            {
                // Otherwise, report the product look-up failure situation  
                Debug.Log("BuyProductID: FAIL. Not purchasing product, either is not found or is not available for purchase");
            }
        }
        else
        {
            // Otherwise, report the fact Purchasing has not succeeded initializing yet. Consider waiting longer or retrying initiailization.
            Debug.Log("BuyProductID FAIL. Not initialized.");
        }
    }

    public void OnInitialized(IStoreController controller, IExtensionProvider extensions)
    {
        Debug.Log("OnInitialized: Completed!");

        this.controller = controller;
        this.extensions = extensions;
    }

    public void OnInitializeFailed(InitializationFailureReason error)
    {
        Debug.LogError("OnInitializeFailed InitializationFailureReason:" + error);
    }

    public PurchaseProcessingResult ProcessPurchase(PurchaseEventArgs e)
    {
        if (string.Equals(e.purchasedProduct.definition.id, item2Id, StringComparison.Ordinal))
        {
            Debug.Log("You've just bought item: " + e.purchasedProduct.definition.id);
            GameManager.Instance.AddCoins(100);
            Debug.Log("Purchase Completed");
        }
        else
        {
            Debug.Log("Purchase Failed: Unrecognized product: " + e.purchasedProduct.definition.id);
        }

        return PurchaseProcessingResult.Complete;
    }

    public void OnPurchaseFailed(Product product, PurchaseFailureReason failureReason)
    {
        Debug.Log("Failed Purchase: FAIL. Product: " + product.definition.storeSpecificId + ", Reason: " + failureReason);
    }
}

banner ad
ca-app-pub-7751761613233148~7425487195
for code : ca-app-pub-7751761613233148/4244790081
interstitial ad 
ca-app-pub-7751761613233148~7425487195
for code : ca-app-pub-7751761613233148/9604927972
reward interstitial  ad  // not used
ca-app-pub-7751761613233148~7425487195
for code : ca-app-pub-7751761613233148/7042343813
Reward ad
ca-app-pub-7751761613233148~7425487195
for code : ca-app-pub-7751761613233148/4416180476
native ad
ca-app-pub-7751761613233148~7425487195
for code : ca-app-pub-7751761613233148/9476935468

Public key
 : MIIBojANBgkqhkiG9w0BAQEFAAOCAY8AMIIBigKCA // written 
after copy : MIIBojANBgkqhkiG9w0BAQEFAAOCAY8AMIIBigKCAYEAlAL9U0T1pFh2P2c2Ckb79DSCHeQKF2DL0+Qk1i+DSL76BaBmUpIY5fmX9LBG9LZ0ZsoWPRqhE7/7xKMR4aSGpg6g/HAqX4EYfCvy6Ks3MfQRWNzqtB5NgBDpnLuzqfbfOxb8GBHfV67vwSoDZKLQ+vRl61ODH149hueK9Z4Sw/0zPjNKgpZkWOitTpGcDSPRINz8IrHel1ohi7rIl05k06JEYEpVBgj5EYQ9qeOwn14bgbiizKDtbAyn23h9Uxh162u1QrPOZHuAi6Jb6/qIBf9pP1JHrBO3LdhhlbD46enKFnC48JXnCpd/OsaHu0ul0ZOfpzg6oKYQY3D2BzDzUREh1dHKqtnF3lxjBQKPs+Wv6tfaFCkaEUQTIs+ciolXMrtq+s8nji17JhsZK5hVfc8s/O2qrwpgDDnRPyqjwRXw5M9dJSPSe+mDYtg/fAeYqNlWHK5tQrFrkFMuzTD4qqnJNU7RL4CRHLCaoA6nztcmG8ATXCh14U4Ww0Tn3EbbAgMBAAE=